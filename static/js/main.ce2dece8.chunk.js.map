{"version":3,"sources":["components/components.module.css","components/display.tsx","components/button.tsx","redux/app-reducer.ts","components/Counter.tsx","components/inputMax.tsx","components/inputMin.tsx","components/Tuner.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["module","exports","Display","props","value","Button","className","disabled","s","btn","onClick","counter","name","initState","maxValue","startValue","error","Counter","state","useSelector","app","dispatch","useDispatch","wrapper","number","red","displayCounter","btnWrapper","type","InputMax","inputWrapper","onChange","e","addValue","currentTarget","InputMin","Tuner","disablet","displayTuner","addMaxValueAC","addMinValueAC","App","Boolean","window","location","hostname","match","rootRedusers","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ce2dece8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"components_btn__3KGA_\",\"disabled\":\"components_disabled__15KGD\",\"inputWrapper\":\"components_inputWrapper__3usDm\",\"wrapper\":\"components_wrapper__W4cUA\",\"btnWrapper\":\"components_btnWrapper__1MmJY\",\"displayCounter\":\"components_displayCounter__27Cnl\",\"red\":\"components_red__2_D-U\",\"displayTuner\":\"components_displayTuner__31M_f\",\"error\":\"components_error__POgVn\",\"number\":\"components_number__cJbDt\"};","import React from \"react\";\ntype displayType = {\n  value: number | string;\n};\nfunction Display(props: displayType) {\n  return <div>{props.value}</div>;\n}\n\nexport default Display;\n","import React from \"react\";\nimport s from \"./components.module.css\";\n\ntype buttonType = {\n  counter: () => void;\n  disabled: boolean;\n  name: string;\n};\n\nfunction Button(props: buttonType) {\n  return (\n    <div>\n      <button\n        className={props.disabled ? `${s.btn} ${s.disabled}` : s.btn}\n        disabled={props.disabled}\n        onClick={props.counter}\n      >\n        {props.name}\n      </button>\n    </div>\n  );\n}\n\nexport default Button;\n","export type StateType = {\r\n    maxValue: number,\r\n    startValue: number,\r\n    value: number | string,\r\n    error: boolean,\r\n}\r\ntype ActionAppReducerType = ReturnType<typeof addMaxValueAC>\r\n    | ReturnType<typeof addMinValueAC>\r\n    | ReturnType<typeof saveValueAC>\r\n    | ReturnType<typeof counterAC>\r\nlet initState: StateType = {\r\n    maxValue: 5,\r\n    value: \"enter values and press 'set'\",\r\n    startValue: 0,\r\n    error: false,\r\n}\r\n\r\nexport const appReducer = (state = initState, action: ActionAppReducerType) => {\r\n    switch (action.type) {\r\n        case 'ADD_MAX_VALUE':\r\n            return (action.value <= state.startValue || state.startValue < 0)\r\n                ? { ...state, value: \"Incorrect value!\", maxValue: action.value, error: true }\r\n                : { ...state, value: \"enter values and press 'set'\", maxValue: action.value, error: false }\r\n        case 'ADD_MIN_VALUE':\r\n            return (action.value < 0 || action.value >= state.maxValue)\r\n                ? { ...state, value: \"Incorrect value!\", startValue: action.value, error: true }\r\n                : { ...state, value: \"enter values and press 'set'\", startValue: action.value, error: false }\r\n        case 'SAVE_VALUE':\r\n            return { ...state, value: state.startValue }\r\n        case 'NEW_COUNT':\r\n            return typeof state.value === 'number'\r\n                ? { ...state, value: ++state.value }\r\n                : state\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const addMaxValueAC = (value: number) => ({ type: 'ADD_MAX_VALUE', value } as const)\r\nexport const addMinValueAC = (value: number) => ({ type: 'ADD_MIN_VALUE', value } as const)\r\nexport const saveValueAC = () => ({ type: 'SAVE_VALUE' } as const)\r\nexport const counterAC = () => ({ type: 'NEW_COUNT' } as const) \r\n","import React from \"react\";\nimport s from \"./components.module.css\";\nimport Display from \"./display\";\nimport Button from \"./button\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootStateType } from \"../redux/store\";\nimport { counterAC, saveValueAC, StateType } from \"../redux/app-reducer\";\n\nfunction Counter() {\n  const state = useSelector<RootStateType, StateType>((state) => state.app);\n  const dispatch = useDispatch();\n\n  let disabled = false;\n  if (typeof state.value === \"string\") {\n    disabled = true;\n  }\n  const saveValue = () => {\n    dispatch(saveValueAC());\n  };\n  const counter = () => {\n    dispatch(counterAC());\n  };\n\n  return (\n    <div className={s.wrapper}>\n      <div\n        className={`${typeof state.value == \"number\" ? `${s.number}` : \"\"} ${\n          state.error || state.value === state.maxValue\n            ? `${s.red} ${s.displayCounter}`\n            : s.displayCounter\n        }`}\n      >\n        <Display value={state.value} />\n      </div>\n      <div className={s.btnWrapper}>\n        <Button\n          counter={counter}\n          disabled={disabled || state.value === state.maxValue}\n          name={\"Inc\"}\n        />\n        <Button counter={saveValue} disabled={disabled} name={\"Reset\"} />\n      </div>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./components.module.css\";\r\n\r\ntype PropsInputType = {\r\n  value: number;\r\n  error: boolean;\r\n  addValue: (value: number) => void;\r\n};\r\n\r\nexport const InputMax = (props: PropsInputType) => {\r\n  const addValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    props.addValue(+e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={s.inputWrapper}>\r\n      <div>max value: </div>\r\n      <input\r\n        className={props.error ? s.error : \"\"}\r\n        type=\"number\"\r\n        value={props.value}\r\n        onChange={addValue}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./components.module.css\";\r\n\r\ntype PropsInputType = {\r\n  value: number;\r\n  error: boolean;\r\n  addValue: (value: number) => void;\r\n};\r\n\r\nexport const InputMin = (props: PropsInputType) => {\r\n  const addValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    props.addValue(+e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={s.inputWrapper}>\r\n      <div>start value: </div>\r\n      <input\r\n        className={props.value < 0 || props.error ? s.error : \"\"}\r\n        type=\"number\"\r\n        value={props.value}\r\n        onChange={addValue}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport s from \"./components.module.css\";\r\nimport Button from \"./button\";\r\nimport { InputMax } from \"./inputMax\";\r\nimport { InputMin } from \"./inputMin\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../redux/store\";\r\nimport {\r\n  addMaxValueAC,\r\n  addMinValueAC,\r\n  saveValueAC,\r\n  StateType,\r\n} from \"../redux/app-reducer\";\r\n\r\nfunction Tuner() {\r\n  const state = useSelector<RootStateType, StateType>((state) => state.app);\r\n  const dispatch = useDispatch();\r\n\r\n  let disablet = false;\r\n  if (typeof state.value === \"number\") {\r\n    disablet = true;\r\n  }\r\n  if (\r\n    state.startValue < 0 ||\r\n    state.maxValue < 0 ||\r\n    state.startValue >= state.maxValue\r\n  ) {\r\n    disablet = true;\r\n  }\r\n  const addMaxValue = (value: number) => {\r\n    dispatch(addMaxValueAC(value));\r\n  };\r\n  const addMinValue = (value: number) => {\r\n    dispatch(addMinValueAC(value));\r\n  };\r\n  const saveValue = () => {\r\n    dispatch(saveValueAC());\r\n  };\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.displayTuner}>\r\n        <InputMax\r\n          error={state.startValue >= state.maxValue}\r\n          value={state.maxValue}\r\n          addValue={addMaxValue}\r\n        />\r\n        <InputMin\r\n          error={state.error}\r\n          value={state.startValue}\r\n          addValue={addMinValue}\r\n        />\r\n      </div>\r\n      <div className={s.btnWrapper}>\r\n        <Button counter={saveValue} disabled={disablet} name={\"Set\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tuner;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Counter from \"./components/Counter\";\nimport Tuner from \"./components/Tuner\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Tuner />\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { appReducer } from './app-reducer';\r\nimport { combineReducers, createStore } from \"redux\";\r\n\r\nconst rootRedusers = combineReducers({\r\n    app: appReducer,\r\n})\r\n\r\nexport type RootStateType = ReturnType<typeof rootRedusers>\r\nexport const store = createStore(rootRedusers)\r\n//@ts-ignore\r\nwindow.store = store\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}